"""
Presentation Generator - AI-powered PowerPoint creation
Creates professional stock pitch presentations using python-pptx and AI content generation.
"""

import os
from datetime import datetime
from typing import Dict, Any, List
from pptx import Presentation
from pptx.util import Inches, Pt
from pptx.enum.text import PP_ALIGN
from pptx.dml.color import RGBColor
import openai
import sys

# Add src directory to path for imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from utils.logger import setup_logger

class PitchGenerator:
    """AI-powered presentation generator for stock pitches."""
    
    def __init__(self, config):
        """Initialize the presentation generator."""
        self.config = config
        self.logger = setup_logger()
        
        # Only initialize OpenAI client if API key is available
        if hasattr(config, 'openai_api_key') and config.openai_api_key:
            try:
                self.client = openai.OpenAI(api_key=config.openai_api_key)
                self.ai_enabled = True
            except Exception as e:
                self.logger.warning(f"OpenAI client initialization failed: {str(e)}")
                self.ai_enabled = False
        else:
            self.client = None
            self.ai_enabled = False
            self.logger.info("Running in free mode without OpenAI API")
        
        # Presentation templates and styles
        self.templates = {
            "Professional": self._get_professional_template,
            "Detailed": self._get_detailed_template,
            "Executive Summary": self._get_executive_template
        }
    
    def create_presentation(self, symbol: str, analysis_results: Dict[str, Any], 
                          style: str = "Professional") -> str:
        """
        Create a complete stock pitch presentation.
        
        Args:
            symbol: Stock ticker symbol
            analysis_results: Results from stock analysis
            style: Presentation style template
            
        Returns:
            Path to the generated presentation file
        """
        try:
            self.logger.info(f"Creating presentation for {symbol}")
            
            # Create presentation object
            prs = Presentation()
            
            # Apply template
            if style in self.templates:
                self.templates[style](prs)
            else:
                self._get_professional_template(prs)
            
            # Generate slides
            self._create_title_slide(prs, symbol, analysis_results)
            self._create_executive_summary_slide(prs, analysis_results)
            self._create_investment_thesis_slide(prs, analysis_results)
            self._create_financial_highlights_slide(prs, analysis_results)
            self._create_valuation_slide(prs, analysis_results)
            self._create_risks_slide(prs, analysis_results)
            self._create_recommendation_slide(prs, analysis_results)
            
            # Generate additional slides based on style
            if style == "Detailed":
                self._create_detailed_analysis_slides(prs, analysis_results)
            
            # Save presentation
            output_path = self._save_presentation(prs, symbol)
            
            self.logger.info(f"Presentation created successfully: {output_path}")
            return output_path
            
        except Exception as e:
            self.logger.error(f"Error creating presentation: {str(e)}")
            raise
    
    def _get_professional_template(self, prs: Presentation):
        """Apply professional template styling."""
        # This is a simplified template
        # In practice, you might load a custom template file
        pass
    
    def _get_detailed_template(self, prs: Presentation):
        """Apply detailed template styling."""
        pass
    
    def _get_executive_template(self, prs: Presentation):
        """Apply executive summary template styling."""
        pass
    
    def _create_title_slide(self, prs: Presentation, symbol: str, analysis_results: Dict[str, Any]):
        """Create title slide."""
        slide_layout = prs.slide_layouts[0]  # Title slide layout
        slide = prs.slides.add_slide(slide_layout)
        
        # Title
        title = slide.shapes.title
        title.text = f"Stock Pitch: {analysis_results['company_name']}"
        
        # Subtitle
        subtitle = slide.placeholders[1]
        subtitle.text = f"Ticker: {symbol}\nAnalysis Date: {datetime.now().strftime('%B %d, %Y')}\nGenerated by Stock Pitch AI"
        
        # Style the title
        title_font = title.text_frame.paragraphs[0].font
        title_font.name = 'Calibri'
        title_font.size = Pt(44)
        title_font.bold = True
        title_font.color.rgb = RGBColor(0, 51, 102)
        
        # Style the subtitle
        subtitle_font = subtitle.text_frame.paragraphs[0].font
        subtitle_font.name = 'Calibri'
        subtitle_font.size = Pt(24)
        subtitle_font.color.rgb = RGBColor(64, 64, 64)
    
    def _create_executive_summary_slide(self, prs: Presentation, analysis_results: Dict[str, Any]):
        """Create executive summary slide."""
        slide_layout = prs.slide_layouts[1]  # Title and content layout
        slide = prs.slides.add_slide(slide_layout)
        
        # Title
        title = slide.shapes.title
        title.text = "Executive Summary"
        
        # Content
        content = slide.placeholders[1]
        tf = content.text_frame
        
        # Add investment thesis from AI, not a placeholder
        thesis_text = analysis_results.get('investment_thesis', '')
        if thesis_text:
            p = tf.paragraphs[0]
            p.text = "Investment Thesis"
            p.font.size = Pt(18)
            p.font.bold = True
            p = tf.add_paragraph()
            p.text = thesis_text
            p.font.size = Pt(14)
            p.level = 1
        
        # Add key metrics
        metrics = analysis_results.get('metrics', {})
        if metrics:
            p = tf.add_paragraph()
            p.text = "Key Metrics"
            p.font.size = Pt(18)
            p.font.bold = True
            for key, value in metrics.items():
                if value is not None:
                    p = tf.add_paragraph()
                    p.text = f"{key.replace('_', ' ').title()}: {value}"
                    p.font.size = Pt(14)
                    p.level = 1
    
    def _create_investment_thesis_slide(self, prs: Presentation, analysis_results: Dict[str, Any]):
        """Create investment thesis slide."""
        slide_layout = prs.slide_layouts[1]
        slide = prs.slides.add_slide(slide_layout)
        
        title = slide.shapes.title
        title.text = "Investment Thesis"
        
        content = slide.placeholders[1]
        tf = content.text_frame
        
        # Add investment thesis
        thesis = analysis_results.get('investment_thesis', 'Investment thesis not available')
        p = tf.paragraphs[0]
        p.text = thesis
        p.font.size = Pt(16)
        
        # Add key highlights
        highlights = analysis_results.get('highlights', [])
        if highlights:
            p = tf.add_paragraph()
            p.text = "Key Investment Highlights:"
            p.font.size = Pt(18)
            p.font.bold = True
            
            for highlight in highlights:
                p = tf.add_paragraph()
                p.text = f"â€¢ {highlight}"
                p.font.size = Pt(14)
                p.level = 1
    
    def _create_financial_highlights_slide(self, prs: Presentation, analysis_results: Dict[str, Any]):
        """Create financial highlights slide."""
        slide_layout = prs.slide_layouts[1]
        slide = prs.slides.add_slide(slide_layout)
        
        title = slide.shapes.title
        title.text = "Financial Highlights"
        
        content = slide.placeholders[1]
        tf = content.text_frame
        
        # Add financial metrics
        metrics = analysis_results.get('metrics', {})
        financial_ratios = analysis_results.get('financial_ratios', {})
        
        # Current metrics
        p = tf.paragraphs[0]
        p.text = "Current Market Metrics"
        p.font.size = Pt(18)
        p.font.bold = True
        
        key_metrics = ['current_price', 'market_cap', 'pe_ratio', 'eps']
        for metric in key_metrics:
            if metric in metrics and metrics[metric] is not None:
                p = tf.add_paragraph()
                p.text = f"{metric.replace('_', ' ').title()}: {metrics[metric]}"
                p.font.size = Pt(14)
                p.level = 1
        
        # Financial ratios
        if financial_ratios:
            p = tf.add_paragraph()
            p.text = "Key Financial Ratios"
            p.font.size = Pt(18)
            p.font.bold = True
            
            for ratio, value in financial_ratios.items():
                if value is not None:
                    p = tf.add_paragraph()
                    p.text = f"{ratio.replace('_', ' ').title()}: {value:.2f}" if isinstance(value, (int, float)) else f"{ratio.replace('_', ' ').title()}: {value}"
                    p.font.size = Pt(14)
                    p.level = 1
    
    def _create_valuation_slide(self, prs: Presentation, analysis_results: Dict[str, Any]):
        """Create valuation analysis slide."""
        slide_layout = prs.slide_layouts[1]
        slide = prs.slides.add_slide(slide_layout)
        title = slide.shapes.title
        title.text = "Valuation Analysis"

        # Clear any existing content
        if len(slide.placeholders) > 1:
            content = slide.placeholders[1]
            tf = content.text_frame
            tf.clear()
        else:
            from pptx.util import Inches
            left = Inches(1)
            top = Inches(1.5)
            width = Inches(8)
            height = Inches(5)
            textbox = slide.shapes.add_textbox(left, top, width, height)
            tf = textbox.text_frame

        # Show AI's full analysis (with DCF/WACC math)
        ai_analysis = analysis_results.get('analysis') or analysis_results.get('ai_analysis')
        if ai_analysis:
            p = tf.add_paragraph() if len(tf.paragraphs) == 0 else tf.paragraphs[0]
            p.text = ai_analysis
            p.font.size = Pt(13)
            p.font.name = 'Consolas'  # Monospaced for math
        else:
            p = tf.add_paragraph() if len(tf.paragraphs) == 0 else tf.paragraphs[0]
            p.text = "Valuation analysis not available."
            p.font.size = Pt(14)

    def _create_risks_slide(self, prs: Presentation, analysis_results: Dict[str, Any]):
        """Create risks and challenges slide."""
        slide_layout = prs.slide_layouts[1]
        slide = prs.slides.add_slide(slide_layout)
        
        title = slide.shapes.title
        title.text = "Key Risks & Challenges"
        
        content = slide.placeholders[1]
        tf = content.text_frame
        
        risks = analysis_results.get('risks', [])
        
        p = tf.paragraphs[0]
        p.text = "Investment Risks to Consider:"
        p.font.size = Pt(18)
        p.font.bold = True
        
        for risk in risks:
            p = tf.add_paragraph()
            p.text = f"â€¢ {risk}"
            p.font.size = Pt(14)
            p.level = 1
        
        # Add risk mitigation note
        p = tf.add_paragraph()
        p.text = "Risk Mitigation"
        p.font.size = Pt(18)
        p.font.bold = True
        
        p = tf.add_paragraph()
        p.text = "Diversification and position sizing are recommended to manage investment risks."
        p.font.size = Pt(14)
        p.level = 1
    
    def _create_recommendation_slide(self, prs: Presentation, analysis_results: Dict[str, Any]):
        """Create recommendation slide."""
        slide_layout = prs.slide_layouts[1]
        slide = prs.slides.add_slide(slide_layout)
        title = slide.shapes.title
        title.text = "Investment Recommendation"
        content = slide.placeholders[1]
        tf = content.text_frame
        recommendation = analysis_results.get('recommendation', 'HOLD')
        p = tf.paragraphs[0]
        p.text = f"Recommendation: {recommendation}"
        p.font.size = Pt(24)
        p.font.bold = True
        if recommendation == "BUY":
            p.font.color.rgb = RGBColor(0, 128, 0)
        elif recommendation == "SELL":
            p.font.color.rgb = RGBColor(255, 0, 0)
        else:
            p.font.color.rgb = RGBColor(255, 165, 0)
        # Add rationale from AI, not a placeholder
        thesis = analysis_results.get('investment_thesis', '')
        if thesis:
            p = tf.add_paragraph()
            p.text = thesis
            p.font.size = Pt(15)
            p.level = 1
        # Use correct highlights key
        highlights = analysis_results.get('highlights', [])
        if highlights:
            p = tf.add_paragraph()
            p.text = "Key Points:"
            p.font.size = Pt(16)
            p.font.bold = True
            for highlight in highlights[:3]:
                p = tf.add_paragraph()
                p.text = f"â€¢ {highlight}"
                p.font.size = Pt(14)
                p.level = 1

    def _create_detailed_analysis_slides(self, prs: Presentation, analysis_results: Dict[str, Any]):
        """Create additional detailed analysis slides."""
        # Company overview slide
        slide_layout = prs.slide_layouts[1]
        slide = prs.slides.add_slide(slide_layout)
        
        title = slide.shapes.title
        title.text = "Company Overview"
        
        content = slide.placeholders[1]
        tf = content.text_frame
        
        p = tf.paragraphs[0]
        p.text = f"Company: {analysis_results['company_name']}"
        p.font.size = Pt(16)
        p.font.bold = True
        
        # Add AI analysis excerpt
        ai_analysis = analysis_results.get('ai_analysis', '')
        if ai_analysis:
            # Take first 500 characters of AI analysis
            excerpt = ai_analysis[:500] + "..." if len(ai_analysis) > 500 else ai_analysis
            p = tf.add_paragraph()
            p.text = excerpt
            p.font.size = Pt(14)
    
    def _save_presentation(self, prs: Presentation, symbol: str) -> str:
        """Save the presentation to file."""
        # Create output directory if it doesn't exist
        output_dir = "/Users/emnet/Desktop/Stock Pitch Project/output"
        os.makedirs(output_dir, exist_ok=True)
        
        # Generate filename
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{symbol}_stock_pitch_{timestamp}.pptx"
        filepath = os.path.join(output_dir, filename)
        
        # Save presentation
        prs.save(filepath)
        
        return filepath
